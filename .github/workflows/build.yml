# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.14
      with:
        versionSpec: 5.x
    - id: determine_version
      name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.14
      with:
        additionalArguments: /overrideconfig mode=Mainline
    - name: Install Octopus Deploy CLI
      uses: OctopusDeploy/install-octopus-cli-action@v1
      with:
        version: latest
    - name: Install Dependencies
      run: dotnet restore
      shell: bash
    - name: Test
      run: dotnet test -l:trx
      shell: bash
    - if: always()
      name: Report
      uses: dorny/test-reporter@v1
      with:
        name: DotNET Tests
        path: '**/*.trx'
        reporter: dotnet-trx
        fail-on-error: 'false'
    - name: Publish
      run: dotnet publish --configuration Release /p:AssemblyVersion=${{ steps.determine_version.outputs.assemblySemVer }}
    - id: package
      name: Package
      run: |
        # Find the publish directories
        shopt -s globstar
        paths=()
        for i in **/publish/*.dll; do
          dir=${i%/*}
          echo ${dir}
          paths=(${paths[@]} ${dir})
        done
        eval uniquepaths=($(printf "%s\n" "${paths[@]}" | sort -u))
        for i in "${uniquepaths[@]}"; do
          echo $i
        done
        # For each publish dir, create a package
        packages=()
        versions=()
        for path in "${uniquepaths[@]}"; do
          # Get the directory name four deep, which is typically the project folder.
          # The directory name is used to name the package.
          dir=${path}/../../../..
          parentdir=$(builtin cd $dir; pwd)
          projectname=${parentdir##*/}
          # Package the published files
          octo pack \
          --basePath ${path} \
          --id ${projectname} \
          --version ${{ steps.determine_version.outputs.semVer }} \
          --format zip \
          --overwrite
          packages=(${packages[@]} "${projectname}.${{ steps.determine_version.outputs.semVer }}.zip")
          versions=(${versions[@]} "${projectname}:${{ steps.determine_version.outputs.semVer }}")
        done
        # Join the array with commas
        printf -v joined "%s," "${packages[@]}"
        # Save the list of packages as an output variable
        echo "::set-output name=artifacts::${joined%,}"
        # Do the same again, but use new lines as the separator
        # https://trstringer.com/github-actions-multiline-strings/
        # Multiline strings require some care in a workflow
        printf -v versionsjoinednewline "%s\n" "${versions[@]}"
        versionsjoinednewline="${versionsjoinednewline//'%'/'%25'}"
        versionsjoinednewline="${versionsjoinednewline//$'\n'/'%0A'}"
        versionsjoinednewline="${versionsjoinednewline//$'\r'/'%0D'}"
        # Save the list of packages newline separated as an output variable
        echo "::set-output name=versions_new_line::${versionsjoinednewline%\n}"
    - name: Push packages to Octopus Deploy üêô
      uses: OctopusDeploy/push-package-action@v2
      env:
        OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_TOKEN }}
        OCTOPUS_HOST: ${{ secrets.OCTOPUS_SERVER_URL }}
      with:
        overwrite_mode: OverwriteExisting
        packages: ${{ steps.package.outputs.artifacts }}
